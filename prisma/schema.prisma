generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  subjects         Subject[]
  notes            Note[]
  quizzes          Quiz[]
  quizAttempts     QuizAttempt[]
  generatedContent GeneratedContent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subject {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  color       String   @default("bg-blue-500")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes   Note[]
  quizzes Quiz[]

  @@index([userId])
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.LongText
  tags      Json?
  userId    String
  subjectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject          Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  generatedContent GeneratedContent[]

  @@index([userId])
  @@index([subjectId])
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  questions   Json
  timeLimit   Int      @default(300)
  userId      String
  subjectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject      Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  quizAttempts QuizAttempt[]

  @@index([userId])
  @@index([subjectId])
}

model QuizAttempt {
  id             String   @id @default(cuid())
  answers        Json
  score          Int
  totalQuestions Int
  timeTaken      Int
  userId         String
  quizId         String
  completedAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
}

model GeneratedContent {
  id        String   @id @default(cuid())
  type      String
  title     String
  content   String   @db.LongText
  userId    String
  noteId    String?
  createdAt DateTime @default(now())

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note? @relation(fields: [noteId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([noteId])
}
